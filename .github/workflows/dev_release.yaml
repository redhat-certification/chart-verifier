name: Create Dev Release
# Delete the previous development release and recreate it
# with code based off of the main branch. The DEV_RELEASE
# tag is updated as part of the "main.yaml" workfmow.
#
# This is done so that the openshift-tools-installer has a valid
# semantic version release to install.
# https://github.com/redhat-actions/openshift-tools-installer

on:
    push:
        branches:
            - main
env:
    DEV_RELEASE: 0.1.0

jobs:
    release:
        name: Create Dev Release
        runs-on: ubuntu-latest
        permissions:
          contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
              with:
                persist-credentials: false

            - name: Setup Go
              uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
              with:
                go-version-file: go.mod

            - name: Set up Python 3.x
              uses: ./.github/actions/setup-python

            - name: Set up Python scripts
              run: |
                # set up python requirements and scripts on PR branch
                python3 -m venv ve1
                cd scripts && ../ve1/bin/pip3 install -r requirements.txt && cd ..
                cd scripts && ../ve1/bin/pip3 install . && cd ..

            - name: Build Binary
              id: build-binary
              run: make bin

            - name: Create tarfile
              if: ${{ steps.build-binary.outcome == 'success' }}
              id: create-tarfile
              run: |
                # check if release file only is included in PR
                ve1/bin/tar-file --release="${DEV_RELEASE}"

            - name: Create development tag and release
              if: ${{ steps.create-tarfile.outcome == 'success' }}
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                TARBALL_FULL_NAME: ${{ steps.create-tarfile.outputs.tarball_full_name }}
              run: |
                gh release delete "${DEV_RELEASE}" --cleanup-tag --yes

                # The next step seems to periodically create a draft release.
                # We think this is because of a race condition.
                # Force a wait after the previous release was deleted.
                sleep 8

                gh release create "${DEV_RELEASE}" "${TARBALL_FULL_NAME}" \
                  --notes "Development release created with each merge into the main branch." \
                  --prerelease
